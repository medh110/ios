name: Build IOS APP

on:
  push:
    branches:
      - main
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
      - '.github/**'

jobs:
  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0
          
      - name: Delete Assets/Videos folder before Unity build
        run: |
          echo "Removing Assets/Videos directory to prevent import errors"
          rm -rf ./Assets/Videos

      - name: Git LFS Pull
        run: |
          git lfs pull
          git reset --hard

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-iOS-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}

      - name: Build iOS with Unity
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: iOS

      - name: Set up Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Install Fastlane and xcodeproj
        run: |
          gem install fastlane
          gem install xcodeproj

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          ls ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Use Automatic Signing in Xcode project
        run: |
          ruby <<'RUBY'
            require 'xcodeproj'

            project_path = 'build/iOS/iOS/Unity-iPhone.xcodeproj'
            project = Xcodeproj::Project.open(project_path)

            project.targets.each do |target|
              next if target.name == 'UnityFramework'
              target.build_configurations.each do |config|
                config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
                config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
                config.build_settings.delete('CODE_SIGN_IDENTITY')
                config.build_settings['DEVELOPMENT_TEAM'] = 'NDK28GDYKQ'
              end
            end

            project.save
          RUBY

      - name: Generate Fastfile
        run: |
          mkdir -p ios-fastlane/fastlane
          echo 'default_platform(:ios)
          platform :ios do
            desc "Build IPA from Unity Xcode project"
            lane :build_ipa do
              build_app(
                project: "../build/iOS/iOS/Unity-iPhone.xcodeproj",
                scheme: "Unity-iPhone",
                export_method: "app-store",
                export_options: {
                  method: "app-store",
                  signingStyle: "automatic",
                  teamID: "NDK28GDYKQ"
                },
                clean: true,
                xcargs: "-allowProvisioningUpdates",
                output_directory: "./output",
                output_name: "UnityApp.ipa"
              )
            end
          end' > ios-fastlane/fastlane/Fastfile

      - name: Build IPA with Fastlane
        run: |
          cd ios-fastlane
          fastlane build_ipa
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-IPA
          path: ios-fastlane/output/UnityApp.ipa
