name: Build IOS APP

on:
  push:
    branches:
      - main
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
      - '.github/**'

jobs:
  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Git LFS Pull
        run: |
          git lfs pull
          git reset --hard

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-iOS-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}

      - name: Build iOS with Unity
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: iOS

      - name: Set up Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Install Fastlane
        run: gem install fastlane

      - name: Install signing certificate
        run: |
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > cert.p12
          security create-keychain -p "buildpass" build.keychain
          security import cert.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "buildpass" build.keychain
          security set-keychain-settings build.keychain
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_CERTIFICATE }}
          CERT_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}

      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        env:
          IOS_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE }}

      - name: Generate Fastfile
        run: |
          mkdir -p ios-fastlane/fastlane
          default_platform(:ios)
          platform :ios do
            desc "Build IPA from Unity Xcode project"
            lane :build_ipa do
              build_app(
                project: "Unity-iPhone.xcodeproj",
                scheme: "Unity-iPhone",
                export_method: "app-store",
                export_options: {
                  method: "app-store",
                  provisioningProfiles: {
                    "com.epyphite.aas-companion-app" => "AAS-Distribuiton-App-Store"
                  },
                  signingStyle: "manual",
                  signingCertificate: "Apple Distribution",
                  teamID: "NDK28GDYKQ"
                },
                clean: true,
                output_directory: "./output",
                output_name: "UnityApp.ipa"
              )
            end
          end

      - name: Build IPA with Fastlane
        run: |
          cd ios-fastlane
          fastlane build_ipa
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-IPA
          path: ios-fastlane/output/UnityApp.ipa
